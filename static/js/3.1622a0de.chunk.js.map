{"version":3,"sources":["components/Order/Order.js","components/Orders/Orders.js","containers/OrdersContainer.js"],"names":["Order","props","className","PizzaPreview","small","pizza","PizzaDescription","order","quantity","Orders","orders","userId","loadingOrders","getOrdersError","Object","entries","length","ordersContent","Fragment","reverse","map","orderType","deliveryAddress","DeliveryAddress","key","_id","getReadableDate","orderDate","total","items","itemId","item","connect","state","auth","checkout"],"mappings":"6MA+BeA,EAzBD,SAACC,GACb,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,iBACb,kBAACC,EAAA,EAAD,CAAcC,OAAK,EAACC,MAAOJ,EAAMI,SAEnC,yBAAKH,UAAU,qBACb,kBAACI,EAAA,EAAD,CACEC,OAAK,EACLC,SAAUP,EAAMO,SAChBH,MAAOJ,EAAMI,Y,yBC+EVI,EAvFA,SAACR,GACd,IAAIS,EAAS,KACb,IACGT,EAAMU,QACPV,EAAMW,eACNX,EAAMY,gBACkC,IAAxCC,OAAOC,QAAQd,EAAMS,QAAQM,OAC7B,CACA,IAAIC,EAAgB,KAElBA,EADEhB,EAAMW,cACQ,kBAAC,aAAD,MACNX,EAAMU,OAEPV,EAAMY,eACC,+DAEA,uDAJA,2DAOlBH,EACE,yBAAKR,UAAU,uBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,oBACb,uCAEF,yBAAKA,UAAU,oBAAoBe,UAKzCP,EACE,kBAAC,IAAMQ,SAAP,KACGjB,EAAMS,OAAOS,UAAUC,KAAI,SAACb,GAC3B,IAAIc,EAAY,KAShB,OANEA,EADEd,EAAMe,gBAEN,kBAACC,EAAA,EAAD,CAAiBD,gBAAiBf,EAAMe,kBAG9B,8CAGZ,yBAAKE,IAAKjB,EAAMkB,IAAKvB,UAAU,uBAC7B,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,uBACd,0BAAMA,UAAU,eACd,oDACA,gCAAMwB,YAAgBnB,EAAMoB,aAE7BN,GAGH,0BAAMnB,UAAU,gBACd,0CACA,gCAAMK,EAAMqB,SAIfd,OAAOC,QAAQR,EAAMsB,OAAOT,KAAI,YAAqB,IAAD,mBAAlBU,EAAkB,KAAVC,EAAU,KACnD,OACE,kBAAC,EAAD,CACEP,IAAKM,EACLtB,SAAUuB,EAAKvB,SACfH,MAAO0B,EAAK1B,iBAYhC,OAAOK,GC9DMsB,uBAPS,SAACC,GAAD,MAAY,CAClCtB,OAAQsB,EAAMC,KAAKvB,OACnBD,OAAQuB,EAAME,SAASzB,OACvBE,cAAeqB,EAAME,SAASvB,cAC9BC,eAAgBoB,EAAME,SAAStB,kBAGO,KAAzBmB,EAlBS,SAAC/B,GACvB,OAAO,kBAAC,EAAWA","file":"static/js/3.1622a0de.chunk.js","sourcesContent":["import React from 'react';\nimport PizzaPreview from '../PizzaPreview/PizzaPreview';\nimport PizzaDescription from '../PizzaDescription/PizzaDescription';\nimport PropTypes from 'prop-types';\n\n/* Represents a single submitted order */\nconst Order = (props) => {\n  return (\n    <div className='item item--order'>\n      <div className='item__pizza'>\n        <div className='item__preview'>\n          <PizzaPreview small pizza={props.pizza} />\n        </div>\n        <div className='item__description'>\n          <PizzaDescription\n            order\n            quantity={props.quantity}\n            pizza={props.pizza}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nOrder.propTypes = {\n  pizza: PropTypes.object.isRequired,\n  quantity: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n};\n\nexport default Order;\n","import React from 'react';\nimport './Orders.scss';\nimport Order from '../../components/Order/Order';\nimport { getReadableDate } from '../../shared/util';\nimport { SyncLoader } from 'react-spinners';\nimport DeliveryAddress from '../../components/DeliveryAddress/DeliveryAddress';\nimport PropTypes from 'prop-types';\n\n/* List of all submitted orders */\nconst Orders = (props) => {\n  let orders = null;\n  if (\n    !props.userId ||\n    props.loadingOrders ||\n    props.getOrdersError ||\n    Object.entries(props.orders).length === 0\n  ) {\n    let ordersContent = null;\n    if (props.loadingOrders) {\n      ordersContent = <SyncLoader />;\n    } else if (!props.userId) {\n      ordersContent = <h2>Sign in to see your orders!</h2>;\n    } else if (props.getOrdersError) {\n      ordersContent = <h2>Unable to retrieve your orders!</h2>;\n    } else {\n      ordersContent = <h2>You have no orders yet!</h2>;\n    }\n\n    orders = (\n      <div className='item-list-container'>\n        <div className='item-list'>\n          <div className='item-list__title'>\n            <h1>Orders</h1>\n          </div>\n          <div className='item-list__empty'>{ordersContent}</div>\n        </div>\n      </div>\n    );\n  } else {\n    orders = (\n      <React.Fragment>\n        {props.orders.reverse().map((order) => {\n          let orderType = null;\n\n          if (order.deliveryAddress) {\n            orderType = (\n              <DeliveryAddress deliveryAddress={order.deliveryAddress} />\n            );\n          } else {\n            orderType = <h2>Carryout Order</h2>;\n          }\n          return (\n            <div key={order._id} className='item-list-container'>\n              <div className='item-list item-list--order'>\n                <div className='item-list__title'>\n                  <span className='order__date-address'>\n                    <span className='order__date'>\n                      <h2>Order placed on:&nbsp;</h2>\n                      <h3> {getReadableDate(order.orderDate)}</h3>\n                    </span>\n                    {orderType}\n                  </span>\n\n                  <span className='order__total'>\n                    <h2>Total:&nbsp;</h2>\n                    <h3>${order.total}</h3>\n                  </span>\n                </div>\n\n                {Object.entries(order.items).map(([itemId, item]) => {\n                  return (\n                    <Order\n                      key={itemId}\n                      quantity={item.quantity}\n                      pizza={item.pizza}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n\n  return orders;\n};\n\nOrders.propTypes = {\n  userId: PropTypes.string,\n  orders: PropTypes.array.isRequired,\n  loadingOrders: PropTypes.bool.isRequired,\n  getOrdersError: PropTypes.bool,\n};\n\nexport default Orders;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Orders from '../components/Orders/Orders';\n\n/* Container for showing a list of all submitted orders */\nconst OrdersContainer = (props) => {\n  return <Orders {...props} />;\n};\n\nOrdersContainer.propTypes = {\n  userId: PropTypes.string,\n  orders: PropTypes.array.isRequired,\n  loadingOrders: PropTypes.bool.isRequired,\n  getOrdersError: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n  userId: state.auth.userId,\n  orders: state.checkout.orders,\n  loadingOrders: state.checkout.loadingOrders,\n  getOrdersError: state.checkout.getOrdersError,\n});\n\nexport default connect(mapStateToProps, null)(OrdersContainer);\n"],"sourceRoot":""}